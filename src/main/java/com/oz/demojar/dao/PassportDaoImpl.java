package com.oz.demojar.dao;

import com.oz.demojar.model.Passport;
import com.oz.demojar.model.Person;
import com.oz.demojar.mysqlDatasource.PassportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.*;

@Primary
@Repository("passport")
class PassportDaoImpl implements PassportDao {

    @Autowired // This means to get the bean called MysqlDataSource Which is auto-generated by Spring, we will use it to handle the data
    private transient PassportRepository passportRepository;

    @Override
    public Passport createPassport(Person person) {
        String passportNumber = person.getCountry().getName().toUpperCase().substring(5) + UUID.randomUUID().toString().toUpperCase().substring(1,8);
        LocalDate expDate = LocalDate.now().plusYears(10L);
        Passport passport = new Passport(passportNumber, expDate, person);
        return passportRepository.save(passport);
    }

    @Override
    public List<Passport> selectAllPassports() {
        return passportRepository.findAll();
    }

    @Override
    public int updatePassportById(Long id, Passport passport) {
        Passport p = getPassportById(id);
        if(p == null) {
            return 0;
        } else {
            passportRepository.delete(p);
            passportRepository.save(passport);
            return 1;
        }
    }

    @Override
    public int deletePassportById(Long id) {
        Passport passport = getPassportById(id);
        if(passport == null){
            return 0;
        } else {
            passportRepository.delete(passport);
            return 1;
        }
    }

    @Override
    public Passport getPassportById(Long id) {
        return passportRepository.findById(id).orElse(null);
    }

    public Passport setPersonToPassport(Passport passport, Person person) {
        passport.setPerson(person);
        return passportRepository.save(passport);
    }

}

