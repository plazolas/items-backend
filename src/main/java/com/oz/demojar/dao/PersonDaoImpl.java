package com.oz.demojar.dao;

import com.oz.demojar.model.Country;
import com.oz.demojar.model.Passport;
import com.oz.demojar.model.Person;
import com.oz.demojar.mysqlDatasource.CountryRepository;
import com.oz.demojar.mysqlDatasource.PassportRepository;
import com.oz.demojar.mysqlDatasource.PersonRepository;

import org.hibernate.annotations.OrderBy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Repository;
import org.springframework.validation.FieldError;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

@Primary
@Repository("person")
class PersonDaoImpl implements PersonDao {

    @Autowired // This means to get the bean called PersonRepository Which is auto-generated by Spring
    private transient PersonRepository personRepository;
    @Autowired
    private transient CountryRepository countryRepository;
    @Autowired
    private transient PassportRepository passportRepository;

    @PersistenceContext
    private EntityManager em;

    @Override
    public Person addPerson(String firstName, String lastName, Country country) {

        int[] persons = new int[] { 101, 102, 103, 104, 105, 115, 110, 111, 109, 112, 117, 118, 119, 90 };
        int[] countries = new int[] { 1, 2, 4, 6, 8, 19, 22, 24, 32, 33, 34 };

        int index = getRandom(countries);

        Country c = countryRepository.getRandomCountry(index);
//        if(country.getId() != null) {
//            c = countryRepository.getById(country.getId());
//        } else if (country.getName() != null) {
//            c = countryRepository.findByName(country.getName());
//        } else {
//            c = countryRepository.getById(19L);
//        }

        index = getRandom(persons);
        Person ra = personRepository.findRandomFirstName(index);
        firstName = ra.getFirstName();
        index = getRandom(persons);
        ra  = personRepository.findRandomLastName(index);
        lastName = ra.getLastName();

        try {
            Person person = new Person(firstName, lastName, c);
            Person newPerson = personRepository.save(person);
            System.out.println(newPerson);
            return newPerson;
        } catch (ConstraintViolationException e) {
            Set<ConstraintViolation<?>> errors = new HashSet<>();
            errors = e.getConstraintViolations();
            errors.forEach(error -> {
                String fieldName = ((FieldError) error).getField();
                String errorMessage = error.getMessage();
                System.out.println("field: " + fieldName + " msg: " + errorMessage);
            });
            return null;
        } catch (Exception e) {
            System.out.println("ERROR: " + e.getMessage());
            e.getStackTrace();
            return null;
        }

    }

    @Override
    public List<Person> selectAllPeople() {
        List<Person> persons = personRepository.findAll(Sort.by(Sort.Direction.DESC, "id"));
        Query query = em.createQuery("From Person");
        //List<Person> persons = query.getResultList();
        //Collections.sort(persons, Comparator.comparing(p -> (p.getLastName() == null) ? "" : p.getLastName().toLowerCase()));
        //return persons;

        // sorted without lower case
        //return  personDAO.findAll().stream().sorted(Comparator.comparing(Person::getLastName)).collect(Collectors.toList());

//
//        int n = 0;
//        List<Integer> rangeList = new ArrayList<>();
//        List<Integer> range= IntStream.range(10,n + 1)
//                .filter(i -> i % 2 > 0)
//                .boxed()
//                .collect(Collectors.toList());
//
//        rangeList.addAll(range);
//
//        System.out.println("rangeList:" + rangeList);
//
//        List<Integer> IntList = IntStream.range(1,n + 1)
//                .filter(i -> i % 3 == 0)
//                .boxed()
//                .collect(Collectors.toList());
//
//        System.out.println("IntList:" + IntList);
//
//        List<String> numbers = Arrays.asList("1", "2", "3", "4", "5", "6");
//        System.out.println("original list: " + numbers);
//
//        List<Integer> even = numbers.stream()
//                .map(s -> Integer.valueOf(s))
//                .filter(number -> number % 2 == 0)
//                .collect(Collectors.toList());
//
//        System.out.println("processed list, only even numbers: " + even);

        return persons;

    }

    @Override
    public int deletePersonById(Long id) {
        Person person = getPersonById(id);
        if (person == null) {
            return 0;
        } else {
            personRepository.delete(person);
            return 1;
        }
    }

    @Override
    public Person updatePersonById(Long id, Person person) {
        Passport pass = null;
        Passport newPass = null;
        Country country = person.getCountry();
        System.out.println(person);
        Person oldPerson = personRepository.getById(id);

        if(person.getPassport() != null) {
            pass = passportRepository.getById(person.getPassport().getId());
            pass.setCountry(country);
            person.setPassport(pass);
        } else {
            person.setPassport(null);
        }
        person.setId(0L);
        System.out.println(oldPerson);
        if(!(oldPerson instanceof Person)) { return null; }
        else {
            if((oldPerson.getCountry() != null && person.getCountry() != null ) &&
               (person.getCountry().getId() != null && oldPerson.getCountry().getId() != null) &&
               !(person.getCountry().getId().equals(oldPerson.getCountry().getId()))
            ) {
                person.setCountry(countryRepository.getById(person.getCountry().getId()));
                country = person.getCountry();
            }

            if((oldPerson.getPassport() != null && person.getPassport() != null ) &&
                    (person.getPassport().getId() != null && oldPerson.getPassport().getId() != null) &&
                    !(person.getPassport().getId().equals(oldPerson.getPassport().getId()))
            ) {
                pass = passportRepository.getById(person.getPassport().getId());
                if (!pass.getCountry().getId().equals(person.getCountry().getId())) {
                    pass.setCountry(person.getCountry());
                    Passport pas = passportRepository.save(pass);
                    System.out.println(pas);
                }
                person.setPassport(passportRepository.getById(person.getPassport().getId()));
            }

            if(person.getLastName()  == null) person.setLastName(oldPerson.getLastName());
            if(person.getFirstName() == null) person.setFirstName(oldPerson.getFirstName());
            if(person.getCountry()   == null) person.setCountry(oldPerson.getCountry());
            if(person.getPassport()  == null) person.setPassport(oldPerson.getPassport());

            personRepository.delete(oldPerson);
        }

        Person p = personRepository.save(person);
        if (pass != null) {
            newPass = setPersonToPassport(pass, p);
            System.out.println(newPass);
        }

        return p;
    }

    @Override
    public Person getPersonById(Long id) {
        Optional<Person> personOpt = personRepository.findById(id);
        return personOpt.orElse(null);
    }

    @Override
    public void addPersonToCountry(Person p, Country c) {
        p.setCountry(c);
        personRepository.save(p);
    }

    public Person setPassportToPerson(Passport passport, Person person) {
        person.setPassport(passport);
        return personRepository.save(person);
    }

    public Passport setPersonToPassport(Passport passport, Person person) {
        passport.setPerson(person);
        return passportRepository.save(passport);
    }

    public Collection<Person> findAllAnns() {
        return personRepository.findAllAnns();
    }

    public Collection<Person> findPersonsWithPassportsByCountry(Long country_id) {
        System.out.println("cid :"+country_id);
        return personRepository.findPersonsWithPassportsByCountry(country_id);
    }

    public long findLastId() {
        return personRepository.findLastId();
    }

    private int getRandom(int[] array) {
        int rnd = new Random().nextInt(array.length);
        return array[rnd];
    }

}

